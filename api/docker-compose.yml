version: "3.2"
services:

  minio:
    image: bitnami/minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: peter-ivo-minio-root
      MINIO_ROOT_PASSWORD: peter-ivo-minio-pass
      MINIO_SERVER_HOST: localhost
      MINIO_SCHEME: http
      MINIO_API_CORS_ALLOW_ORIGIN: '*'      
    networks:
      - mynet
  
  mc:
    image: minio/mc
    container_name: mc
    network_mode: host
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add --api s3v2 minio http://localhost:9000/ peter-ivo-minio-root peter-ivo-minio-pass;
      /usr/bin/mc rm -r --force minio/first-bucket;
      /usr/bin/mc mb -p minio/first-bucket;
      /usr/bin/mc policy set public minio/first-bucket;
      /usr/bin/mc admin trace minio -a --debug;
      "      

  mongodb:
    image: mongo:latest
    container_name: 'mongodb'
    ports:
      - 27017:27017
    networks:
      - mynet

  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/lag/:/var/log/rabbitmq
    networks:
      - mynet
  
  # backend:
  #   restart: always
  #   build:
  #     context: ./
  #   volumes:
  #     - .:/src
  #     - /src/node_modules/
  #   depends_on:
  #     - rabbitmq
  #     - mongodb
  #     - minio
  #   environment:
  #     PORT: 4000
  #     AMQP_URL: amqp://guest:guest@rabbitmq:5672
  #     MONGO_URL: mongodb://mongodb:27017/mydb
  #     ACCESS_TOKEN_SECRET: black-magic
  #     BUCKET_HOST: http://localhost:9000/
  #     BUCKET_ENDPOINT: http://minio:9000/
  #     BUCKET_ACCESS_KEY:  peter-ivo-minio-root
  #     BUCKET_SECRET_KEY:  peter-ivo-minio-root 
  #   ports:
  #     - 4000:4000
  #   networks:
  #     - mynet

networks:
  mynet:
    driver: bridge